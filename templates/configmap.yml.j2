apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ kubernetes_rtorrent_configmap }}
  namespace: {{ kubernetes_rtorrent_namespace }}
data:
  rtorrent.rc: |
    # This is an example resource file for rTorrent. Copy to
    # ~/.rtorrent.rc and enable/modify the options as needed. Remember to
    # uncomment the options you wish to enable.

    # Maximum and minimum number of peers to connect to per torrent.
    throttle.min_peers.normal.set = {{ kubernetes_rtorrent_min_peers }}
    throttle.max_peers.normal.set = {{ kubernetes_rtorrent_max_peers }}

    # Same as above but for seeding completed torrents (-1 = same as downloading)
    throttle.min_peers.seed.set = {{ kubernetes_rtorrent_min_peers_seed }}
    throttle.max_peers.seed.set = {{ kubernetes_rtorrent_max_peers_seed }}

    # Maximum number of simultanious uploads per torrent.
    throttle.max_uploads.set = {{ kubernetes_rtorrent_max_uploads }}

    # Maximum number of simultaneous downloads and uploads slots (global slots!)
    throttle.max_downloads.global.set = {{ kubernetes_rtorrent_max_global_downloads }}
    throttle.max_uploads.global.set = {{ kubernetes_rtorrent_max_global_uploads }}

    # Global upload and download rate in KiB. "0" for unlimited.
    throttle.global_down.max_rate.set_kb = {{ kubernetes_rtorrent_download_rate }}
    throttle.global_up.max_rate.set_kb = {{ kubernetes_rtorrent_upload_rate }}

    # Default directory to save the downloaded torrents.
    directory.default.set = {{ kubernetes_rtorrent_directory_download }}

    # Default session directory. Make sure you don't run multiple instance
    # of rtorrent using the same session directory. Perhaps using a
    # relative path?
    session.path.set = {{ kubernetes_rtorrent_directory_session }}

    # Port range to use for listening.
    network.port_range.set = {{ kubernetes_rtorrent_port_range }}

    # Start opening ports at a random position within the port range.
    network.port_random.set = {{ kubernetes_rtorrent_port_random }}

    # CURL options to add support for nonofficial SSL trackers and peers
    network.http.ssl_verify_peer.set = {{ kubernetes_rtorrent_ssl_verify_peer }}

    # Maximum number of connections rtorrent can accept/make
    network.max_open_sockets.set = {{ kubernetes_rtorrent_max_open_sockets }}

    # Maximum number of open files rtorrent can keep open
    network.max_open_files.set = {{ kubernetes_rtorrent_max_open_files }}

    # Maximum number of simultaneous HTTP request (used by announce or scrape
    # requests)
    network.http.max_open.set = {{ kubernetes_rtorrent_max_open_http }}

    # Send and receive buffer size for socket. Disabled by default (`0`), this
    # means the default is used by OS (you have to modify the system wide
    # settings!)
    # Increasing buffer sizes may help reduce disk seeking, connection polling as
    # more data is buffered each time the socket is written to. It will result
    # higher memory usage (not visible in rtorrent process!).
    network.receive_buffer.size.set = {{ kubernetes_rtorrent_receive_buffer_size }}
    network.send_buffer.size.set = {{ kubernetes_rtorrent_send_buffer_size }}

    # CURL option to lower DNS timeout.
    network.http.dns_cache_timeout.set = {{ kubernetes_rtorrent_dns_cache_timeout }}

    # Max packet size using xmlrpc.
    network.xmlrpc.size_limit.set = {{ kubernetes_rtorrent_xmlrpc_size_limit }}

    # Check hash for finished torrents. Might be usefull until the bug is
    # fixed that causes lack of diskspace not to be properly reported.
    pieces.hash.on_completion.set = {{ kubernetes_rtorrent_check_hash }}

    # Set the max amount of memory address space used to mapping file chunks. This
    # refers to memory mapping, not physical memory allocation.
    # This may also be set using ulimit -m where 3/4 will be
    # allocated to file chunks.
    pieces.memory.max.set = {{ kubernetes_rtorrent_max_memory_usage }}

    # Preloading a piece of a file.
    # Possible values: `0` (Off) , `1` (Madvise) , `2` (Direct paging).
    pieces.preload.type.set = {{ kubernetes_rtorrent_pieces_preload_type }}
    pieces.preload.min_size.set = {{ kubernetes_rtorrent_pieces_preload_min_size }}
    pieces.preload.min_rate.set = {{ kubernetes_rtorrent_pieces_preload_min_rate }}

    # Set whetever the client should try to connect to UDP trackers.
    trackers.use_udp.set = {{ kubernetes_rtorrent_use_udp_trackers }}

    # Set the numwant field sent to the tracker, which indicates how many peers we
    # want. A negative value disables this feature.
    trackers.numwant.set = {{ kubernetes_rtorrent_tracker_numwant }}

    # Encryption options, set to none (default) or any combination of the following:
    # allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
    #
    # The example value allows incoming encrypted connections, starts unencrypted
    # outgoing connections but retries with encryption if they fail, preferring
    # plaintext to RC4 encryption after the encrypted handshake
    #
    protocol.encryption.set = {{ kubernetes_rtorrent_encryption }}

    # Enable DHT support for trackerless torrents or when all trackers are down.
    # May be set to "disable" (completely disable DHT), "off" (do not start DHT),
    # "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
    # The default is "off". For DHT to work, a session directory must be defined.
    #
    dht.mode.set = {{ kubernetes_rtorrent_dht }}

    # UDP port to use for DHT.
    #
    dht.port.set = {{ kubernetes_rtorrent_dht_port }}

    # Enable peer exchange (for torrents not marked private)
    #
    protocol.pex.set = {{ kubernetes_rtorrent_peer_exchange }}

    # Misc other settings
    #   EXAMPLE: 'scgi_port = 127.0.0.1:5000'
    {% for v in kubernetes_rtorrent_other_settings %}
    {{ v }};
    {% endfor %}

    # Watch one or multiple directories for new torrents, and stop those that have
    # been deleted.
    {% if kubernetes_rtorrent_directory_watch is string or kubernetes_rtorrent_directory is mapping %}
        {% set kubernetes_rtorrent_directory_watch = [kubernetes_rtorrent_directory_watch,] %}
    {% endif %}
    {% for watch_dir in kubernetes_rtorrent_directory_watch %}
        {% if watch_dir is mapping %}
            {% set watch_dir_path = watch_dir.path %}
        {% else %}
            {% set watch_dir_path = watch_dir %}
        {% endif %}
        schedule2 = {{ watch_dir_path }}, {{ watch_dir.refresh_time|default(kubernetes_rtorrent_global_refresh_time) }}, {{ watch_dir.refresh_time|default(kubernetes_rtorrent_global_refresh_time) }}, "load.start={{ watch_dir_path }}/*.torrent,d.custom1.set={{ watch_dir.download|default(kubernetes_rtorrent_directory_download) }},d.custom2.set=1"
        method.set_key = event.download.finished,set_done_var,d.custom2.set=
    {% endfor %}
    schedule2 = {{ kubernetes_rtorrent_schedule_untied_directory }}

    # Move torrents on completion
    {% if kubernetes_rtorrent_move_when_complete %}
    method.insert = d.move_to_complete, simple, "d.directory.set=$argument.1=; execute=mkdir,-p,$argument.1=; execute=mv,-u,$argument.0=,$argument.1=; d.save_full_session="
    method.set_key = event.download.finished,move_complete,"d.move_to_complete=$d.data_path=,$d.custom1="
    {% endif %}

    # Remove data when erasing torrents
    {% if kubernetes_rtorrent_delete_erased %}
    method.set_key = event.download.erased,delete_erased,"execute=rm,-rf,--,$d.data_path="
    # Erase data files when a download is removed that still has 'custom2' set.
    method.set_key = event.download.erased,rm_files,"branch=d.custom2=,\"execute={rm,-rf,--,$d.data_path=}\""
    {% endif %}

    # Whether to allocate disk space for a new torrent.
    system.file.allocate.set = {{ kubernetes_rtorrent_file_allocate }}

    #
    # Do not modify the following parameters unless you know what you're doing.
    #

    # Hash read-ahead controls how many MB to request the kernel to read
    # ahead. If the value is too low the disk may not be fully utilized,
    # while if too high the kernel might not be able to keep the read
    # pages in memory thus end up trashing.
    #hash_read_ahead = 10

    # Interval between attempts to check the hash, in milliseconds.
    #hash_interval = 100

    # Number of attempts to check the hash while using the mincore status,
    # before forcing. Overworked systems might need lower values to get a
    # decent hash checking rate.
    #hash_max_tries = 10

    # Specific to this docker
    log.open_file = "rtorrent", /data/rtorrent/log/rtorrent.log
    log.add_output = "info", "rtorrent"
